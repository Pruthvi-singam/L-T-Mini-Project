        -:    0:Source:src/functions.c
        -:    0:Programs:3
        -:    1:
        -:    2:#include "header.h"
        2:    3:int sum(calculate *compute){
        2:    3-block  0
        2:    4:   int result=compute->value1+compute->value2;
        2:    5:   printf("%d + %d = %d\n",compute->value1,compute->value2,result);
        2:    5-block  0
        2:    6:   return result;
        -:    7:}
        2:    8:int substraction(calculate *compute){
        2:    8-block  0
        2:    9:    int result=(compute->value1)-(compute->value2);
        2:   10:    printf("%d - %d = %d\n",compute->value1,compute->value2,result);
        2:   10-block  0
        2:   11:    return result;
        -:   12:}
        2:   13:int multiplication(calculate *compute){
        2:   13-block  0
        2:   14:    int result=compute->value1*compute->value2;
        2:   15:     printf("%d * %d = %d\n",compute->value1,compute->value2,result);
        2:   15-block  0
        2:   16:     return result;}
        3:   17:int division(calculate *compute){
        3:   17-block  0
        3:   18:    if(compute->value2!=0){
        3:   18-block  0
        2:   19:    int result= compute->value1/compute->value2;
        2:   20:      printf(" quotient when %d / %d = %d\n",compute->value1,compute->value2,result);
        2:   20-block  0
        2:   21:      printf(" remainder when %d / %d = %d\n",compute->value1,compute->value2,compute->value1%compute->value2);
        2:   22:      return result;}
        -:   23:    else
        -:   24:      {
        1:   25:         printf("ERROR!! -- divisor can't be ZERO\n"); 
        1:   25-block  0
        1:   26:         printf("Try other operations\n");
        1:   27:         return -1;
        -:   28:      }  
        -:   29:}
        2:   30:int squareroot(trigonometric *tri){
        2:   30-block  0
        2:   31:   if(tri->value3 < 0)
        2:   31-block  0
        1:   32:    {printf("negative numbers don't have real square roots\n");
        1:   32-block  0
        1:   33:      return -1;}  
        1:   34:     float result=sqrt(tri->value3);
        1:   35:     printf("squareroot of %d = %.3f\n",tri->value3,result);
        1:   35-block  0
        1:   36:     return result;
        -:   37:}
        2:   38:int power(calculate *compute){
        2:   38-block  0
        2:   39:int result= pow(compute->value1,compute->value2);
        2:   40: printf("%d ^%d = %d\n",compute->value1,compute->value2,result);
        2:   40-block  0
        2:   41: return result;
        -:   42:}
        2:   43:int sine(trigonometric *tri){
        2:   43-block  0
        2:   44:float result= sin(tri->value3);
        2:   45: return result;
        2:   45-block  0
        -:   46:}
        2:   47:int cosine(trigonometric *tri){
        2:   47-block  0
        2:   48:float result=cos(tri->value3);
        2:   49: printf("cos %d = %.3f\n",tri->value3,result);
        2:   49-block  0
        2:   50:  return result;
        -:   51:}
        2:   52:int ttan(trigonometric *tri){
        2:   52-block  0
        2:   53:float result= tan(tri->value3);
        2:   54: printf("tan %d = %.3f\n",tri->value3,result);
        2:   54-block  0
        2:   55: return result;
        -:   56:}
        2:   57:int cosec(trigonometric *tri){
        2:   57-block  0
        2:   58:float result=1/sin(tri->value3);
        2:   59: printf("cosec %d = %.3f\n",tri->value3,result);
        2:   59-block  0
        2:   60: return result;
        -:   61:}
        2:   62:int sec(trigonometric *tri){
        2:   62-block  0
        2:   63:float result=1/cos(tri->value3);
        2:   64: printf("sec %d = %.3f\n",tri->value3,result);
        2:   64-block  0
        2:   65: return result;
        -:   66:}
        2:   67:int cot(trigonometric *tri){
        2:   67-block  0
        2:   68:float result= 1/tan(tri->value3);
        2:   69: printf("cot %d = %.3f\n",tri->value3,result);
        2:   69-block  0
        2:   70: return result;
        -:   71:}
        2:   72:int exponent(trigonometric *tri){
        2:   72-block  0
        2:   73:float result= exp(tri->value3);
        2:   74: printf("e ^%d = %.3f\n",tri->value3,result);
        2:   74-block  0
        2:   75: return result;
        -:   76:}
        4:   77:int factorial(trigonometric *tri){
        4:   77-block  0
        4:   78:  if(tri->value3 < 0)
        4:   78-block  0
        2:   79:    {printf("factorial for negative numbers not possible\n");
        2:   79-block  0
        2:   80:      return -1;}
        -:   81:
        2:   82:  if(tri->value3 == 0)
        2:   82-block  0
        1:   83:   { return 1;}
        1:   83-block  0
        1:   84:    long long int fact=1;
        5:   85:    for (int i = 1; i <= tri->value3;i++) {
        1:   85-block  0
        4:   85-block  1
        5:   85-block  2
        4:   86:            fact *= i;
        -:   87:        }
        1:   88: printf("%d!= %lld\n",tri->value3,fact);
        1:   88-block  0
        1:   89: return fact;
        -:   90:}
        2:   91:int logbase10(trigonometric *tri){
        2:   91-block  0
        2:   92:if(tri->value3 <=0)
        2:   92-block  0
        1:   93:    {printf("Don't use zero and negative value for value\n");
        1:   93-block  0
        1:   94:      return -1;}
        1:   95:    float result=log10(tri->value3);
        1:   96:    printf("log %d = %.3f\n",tri->value3,result);
        1:   96-block  0
        1:   97:    return result;
        -:   98:    }
