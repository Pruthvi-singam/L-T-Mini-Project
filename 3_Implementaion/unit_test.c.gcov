        -:    0:Source:test/unit_test.c
        -:    0:Programs:3
        -:    1:
        -:    2:#include "unity.h"
        -:    3:#include "header.h"
        -:    4:#define PROJECT_NAME    "Calculator"
        -:    5:calculate testcal={10,5};
        -:    6:trigonometric testo={4};
        -:    7:calculate testcal1={-3,-2} ,testdiv0={3,0};
        -:    8:trigonometric testf1={0};
        -:    9:trigonometric testf2={-5};
        -:   10:void test_sum(void);
        -:   11:void test_substraction(void);
        -:   12:void test_multiplication(void);
        -:   13:void test_division(void);
        -:   14:void test_exponent(void);
        -:   15:void test_factorial(void);
        -:   16:void test_root(void);
        -:   17:void test_power(void);
        -:   18:void test_sine(void);
        -:   19:void test_cosine(void);
        -:   20:void test_ttan(void);
        -:   21:void test_sec(void);
        -:   22:void test_cosec(void);
        -:   23:void test_cot(void);
        -:   24:void test_zero_factorial(void);
        -:   25:void test_negative_factorial(void);
        -:   26:void test_division_byZero(void);
        -:   27:void test_division_byZero(void);
        -:   28:void test_logbase10(void);
        -:   29:void test_logbase10_zeroAndnegative(void);
        -:   30:
       19:   31:void setUp(){}
       19:   31-block  0
        -:   32:
       19:   33:void tearDown(){}
       19:   33-block  0
        -:   34:
        -:   35:
        1:   36:int main()
        1:   36-block  0
        -:   37:{
        -:   38:
        1:   39:  UNITY_BEGIN();
        1:   39-block  0
        -:   40:
        1:   41:  RUN_TEST(test_sum);
        1:   42:  RUN_TEST(test_substraction);
        1:   43:  RUN_TEST(test_multiplication);
        1:   44:  RUN_TEST(test_division);
        1:   45:  RUN_TEST(test_division_byZero);
        1:   46:  RUN_TEST(test_root);
        1:   47:  RUN_TEST(test_power);
        1:   48:  RUN_TEST(test_exponent);
        1:   49:  RUN_TEST(test_factorial);
        1:   50:  RUN_TEST(test_zero_factorial);
        1:   51:  RUN_TEST(test_negative_factorial);
        1:   52:  RUN_TEST(test_sine);
        1:   53:  RUN_TEST(test_cosine);
        1:   54:  RUN_TEST(test_ttan);
        1:   55:  RUN_TEST(test_cosec);
        1:   56:  RUN_TEST(test_sec);
        1:   57:  RUN_TEST(test_cot);
        1:   58:  RUN_TEST(test_logbase10);
        1:   59:  RUN_TEST(test_logbase10_zeroAndnegative);
        -:   60:
        1:   61:  return UNITY_END();
        -:   62:}
        -:   63:
        1:   64:void test_sum(void) {
        1:   64-block  0
        1:   65:  TEST_ASSERT_EQUAL(15,sum(&testcal));
        1:   65-block  0
        1:   66:   TEST_ASSERT_EQUAL(-5,sum(&testcal1)); 
        1:   67:   }
        1:   68:void test_substraction(void) {
        1:   68-block  0
        1:   69:  TEST_ASSERT_EQUAL(5,substraction(&testcal));
        1:   69-block  0
        1:   70:  TEST_ASSERT_EQUAL(-1,substraction(&testcal1)); 
        1:   71:}
        1:   72:void test_multiplication(void) {
        1:   72-block  0
        1:   73:  TEST_ASSERT_EQUAL(50,multiplication(&testcal));
        1:   73-block  0
        1:   74:  TEST_ASSERT_EQUAL(6,multiplication(&testcal1)); 
        1:   75:}
        1:   76:void test_division(void) {
        1:   76-block  0
        1:   77:  TEST_ASSERT_EQUAL(2,division(&testcal));
        1:   77-block  0
        1:   78:  TEST_ASSERT_EQUAL(1,division(&testcal1)); 
        1:   79:}
        1:   80:void test_division_byZero(void){
        1:   80-block  0
        1:   81:   TEST_ASSERT_EQUAL(-1, division(&testdiv0));
        1:   81-block  0
        1:   82:}
        1:   83:void test_power(void) {
        1:   83-block  0
        1:   84:  TEST_ASSERT_EQUAL(100000,power(&testcal));
        1:   84-block  0
        1:   85:   TEST_ASSERT_EQUAL(-0.111,power(&testcal1)); 
        1:   86:}
        1:   87:void test_root(void) {
        1:   87-block  0
        1:   88:  TEST_ASSERT_EQUAL(2,squareroot(&testo));
        1:   88-block  0
        1:   89:  TEST_ASSERT_EQUAL(-1,squareroot(&testf2)); 
        1:   90:}
        1:   91:void test_factorial(void) {
        1:   91-block  0
        1:   92:  TEST_ASSERT_EQUAL(24,factorial(&testo));
        1:   92-block  0
        1:   93:  TEST_ASSERT_EQUAL(-1,factorial(&testf2)); 
        1:   94:}
        1:   95:void test_exponent(void) {
        1:   95-block  0
        1:   96:  TEST_ASSERT_EQUAL(54.598,exponent(&testo));
        1:   96-block  0
        1:   97:   TEST_ASSERT_EQUAL(0.0067,exponent(&testf2)); 
        1:   98:}
        1:   99:void test_sine(void) {
        1:   99-block  0
        1:  100:  TEST_ASSERT_EQUAL(-0.756,sine(&testo));
        1:  100-block  0
        1:  101:  TEST_ASSERT_EQUAL(0.958,sine(&testf2)); 
        1:  102:}
        1:  103:void test_cosine(void) {
        1:  103-block  0
        1:  104:  TEST_ASSERT_EQUAL(-0.653,cosine(&testo));
        1:  104-block  0
        1:  105:  TEST_ASSERT_EQUAL(0.283,cosine(&testf2)); 
        1:  106:}
        1:  107:void test_ttan(void) {
        1:  107-block  0
        1:  108:  TEST_ASSERT_EQUAL(1.157,ttan(&testo));
        1:  108-block  0
        1:  109:   TEST_ASSERT_EQUAL(3.380,ttan(&testf2));
        1:  110:}
        1:  111:void test_sec(void) {
        1:  111-block  0
        1:  112:  TEST_ASSERT_EQUAL(-1.529,sec(&testo));
        1:  112-block  0
        1:  113:   TEST_ASSERT_EQUAL(3.525,sec(&testf2)); 
        1:  114:}
        1:  115:void test_cot(void) {
        1:  115-block  0
        1:  116:  TEST_ASSERT_EQUAL(0.863,cot(&testo));
        1:  116-block  0
        1:  117:  TEST_ASSERT_EQUAL(-0.295,cot(&testf2)); 
        1:  118:}
        1:  119:void test_cosec(void) {
        1:  119-block  0
        1:  120:  TEST_ASSERT_EQUAL(-1.321,cosec(&testo));
        1:  120-block  0
        1:  121:   TEST_ASSERT_EQUAL(1.042,cosec(&testf2)); 
        1:  122:}
        1:  123:void test_zero_factorial(void)
        1:  123-block  0
        -:  124:{
        1:  125:  TEST_ASSERT_EQUAL(1, factorial(&testf1));
        1:  125-block  0
        1:  126:}
        -:  127:
        -:  128:
        1:  129:void test_negative_factorial(void)
        1:  129-block  0
        -:  130:{
        1:  131:  TEST_ASSERT_EQUAL(-1, factorial(&testf2));
        1:  131-block  0
        1:  132:}
        -:  133:
        1:  134:void test_logbase10(void)
        1:  134-block  0
        -:  135:{
        1:  136:  TEST_ASSERT_EQUAL(0.602,logbase10(&testo));
        1:  136-block  0
        1:  137:}
        -:  138:
        1:  139:void test_logbase10_zeroAndnegative(void)
        1:  139-block  0
        -:  140:{
        1:  141:  TEST_ASSERT_EQUAL(-1, logbase10(&testf2));
        1:  141-block  0
        1:  142:}
